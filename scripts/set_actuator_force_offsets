from val_description import InstanceFileHandler.InstanceFileHandle
import argparse


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Load configurations to one or multiple joints",
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    # top level args
    parser.add_argument("-a", "--joint", nargs='*', type=str,
                        help="Target only this joint (can be a group)")
    parser.add_argument("-t", "--type", type=str, default='turbodriver',
                        help="Type of target if -c not supplied")
    parser.add_argument("-f", "--files", nargs="+", type=str,
                        help="Use this config file(s) if target joint specified")
    parser.add_argument(
        "-c", "--cfg", type=str, help="Configuration yaml description to use")
    parser.add_argument(
        "-i", "--instance", type=str, help="Valkyrie instance xml to use")
    parser.add_argument("-l", "--logfile", default='/tmp/cfgLoader.log',
                        help="Destination of log file. Default /tmp/cfgLoader.log")
    parser.add_argument(
        "-n", "--no-curses", action='store_true', help="Do not use the curses gui")
    parser.add_argument("-y", "--yaml-template", action='store_true',
                        help="Just output a template yaml file to stdout")
    parser.add_argument(
        "-e", "--env", default=False, action='store_true', help="Get instance file path from environment variable ROBOT_INSTANCE")
    parser.add_argument(
        "-s", "--seq", default=False, action='store_true', help="Load coeffs sequentially rather than in parallel")
    parser.epilog = """
    You can either load a single config file to a joint by specifying -j and -f
    or use a yaml description of configuration with the -c flag. If -j is given with
    a -c only those specified will be loaded.

    Yaml should be supported by cfgYaml.py. See an example with -y

    Currently supported types: turbodriver

    Precedence is given to earlier files in the sorted list.

    Script will exit with 0 if everything successfully loads and there are only warnings.
    Otherwise any errors will result in a return value of 1.
    """
    args = parser.parse_args()
