#!/usr/bin/env python

import os
from val_description import InstanceFileHandler
import xml.etree.ElementTree as xmlParser
import argparse
import logging
import nasa_common_logging

nasa_common_logging.logging_utils.configure_common_logging()
logger = logging.getLogger(__name__)


def getXmlValueAsFloat(filePath, elementToRead):
    if os.path.isfile(filePath):
        tree = xmlParser.parse(filePath)
        xmlReadString = 'Coeffs/Coeff[@id=' + '"' + elementToRead + '"' + ']'
        if xmlReadString:
            for elem in tree.iterfind(xmlReadString):
                return float(elem.get('value'))
        else:
            msg = "String " + xmlReadString + " not found in " + filePath
            logger.error(msg)
            raise Exception(msg)
    else:
        msg = "File at " + filePath + " does not exist!"
        logger.error(msg)
        raise Exception(msg)


def setXmlValueFromFloat(filePath, elementToWrite, valueToSet):
    if os.path.isfile(filePath):
        tree = xmlParser.parse(filePath)
        xmlWriteString = 'Coeffs/Coeff[@id=' + '"' + elementToWrite + '"' + ']'
        if xmlWriteString:
            for elem in tree.iterfind(xmlWriteString):
                elem.set("value", str(valueToSet))
        else:
            msg = "String " + xmlWriteString + " not found in " + filePath
            logger.error(msg)
            raise Exception(msg)

        tree.write(filePath)
    else:
        msg = "File at " + filePath + " does not exist!"
        logger.error(msg)
        raise Exception(msg)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Apply torque offsets contained in file to coeff files for actuators on a robot described by an instance file.",
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    # top level args
    parser.add_argument("-o", "--offsets-file", type=str,
                        help="Full file path of the xml file containing the force offsets to be appliced")
    parser.add_argument("-i", "--instance-file", type=str,
                        help="Full file path to the instance file for the robot containing the actuators to which the offsets will be applied")
    parser.add_argument("-r", "--reset-offset", action='store_true',
                        help="Reset all the current torque offsets to zero")

    args = parser.parse_args()

    if not args.instance_file:
        msg = "You MUST supply an instance file via the -i argument!"
        logger.error(msg)
        raise Exception(msg)

    if not args.offsets_file:
        msg = "You MUST supply a file containing force offsets via the -o argument!"
        logger.error(msg)
        raise Exception(msg)

    instanceFilePath = args.instance_file
    offsetsFile = xmlParser.parse(args.offsets_file)
    instanceFileHandler = InstanceFileHandler.InstanceFileHandler(instanceFilePath)

    valDescriptionPackagePath = os.getenv('VAL_WORKSPACE') + '/src/val_description'
    actuatorCoeffFilePath = valDescriptionPackagePath + '/instance/coefficients/actuators/'

    jointTorqueOffsetsDictionary = {}
    actuatorSerialNumberDictionary = {}
    root = offsetsFile.getroot()

    for joint in root:
        jointTorqueOffsetsDictionary[joint.get('name')] = joint.get('torqueOffset')

        if joint.get('type') == None:
            try:
                actuatorSerialNumberDictionary[joint.get('name')] = actuatorCoeffFilePath + instanceFileHandler.getSerialNumberByActuatorName(joint.get('name'))
            except Exception as e:
                msg = 'Exception encountered trying to get serial number for actuator ' + joint.get('name') + ' , skipping this actuator! Make sure it exists in instance file!'
                print msg
                logger.warn(msg)
                continue

            currentOffset = getXmlValueAsFloat(actuatorSerialNumberDictionary[joint.get('name')], 'TorqueOffset_Nm')
            jointKinematicDirection = getXmlValueAsFloat(actuatorSerialNumberDictionary[joint.get('name')], "JointKinematicDir")
            if (args.reset_offset):
                setXmlValueFromFloat(actuatorSerialNumberDictionary[joint.get('name')], 'TorqueOffset_Nm', 0.0)
            else:
                ihmcTorqueOffset = float(jointTorqueOffsetsDictionary[joint.get('name')])
                setXmlValueFromFloat(actuatorSerialNumberDictionary[joint.get('name')], 'TorqueOffset_Nm', currentOffset + jointKinematicDirection * ihmcTorqueOffset)

        else:
            msg = "Joint " + joint.get('name') + " must be a complex joint. These are not currently supported in actuator force offset setter!"
            logger.warn(msg)
            print msg
