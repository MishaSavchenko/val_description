#!/usr/bin/env python

import os
from val_description import InstanceFileHandler
import xml.etree.ElementTree as xmlParser
import argparse
import logging
import nasa_common_logging

nasa_common_logging.logging_utils.configure_common_logging()
logger = logging.getLogger(__name__)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Apply torque offsets contained in file to coeff files for actuators on a robot described by an instance file.",
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    # top level args
    parser.add_argument("-o", "--offsets-file", type=str,
                        help="Full file path of the xml file containing the force offsets to be appliced")
    parser.add_argument("-i", "--instance-file", type=str,
                        help="Full file path to the instance file for the robot containing the actuators to which the offsets will be applied")

    args = parser.parse_args()

    if not args.instance_file:
        msg = "You MUST supply an instance file via the -i argument!"
        logger.error(msg)
        raise Exception(msg)

    if not args.offsets_file:
        msg = "You MUST supply a file containing force offsets via the -o argument!"
        logger.error(msg)
        raise Exception(msg)

    instanceFilePath = args.instance_file
    offsetsFile = xmlParser.parse(args.offsets_file)
    instanceFileHandler = InstanceFileHandler.InstanceFileHandler(instanceFilePath)

    valDescriptionPackagePath = os.getenv('VAL_WORKSPACE') + '/src/val_description'
    actuatorCoeffFilePaths = valDescriptionPackagePath + '/instance/coefficients/actuators/'

    simpleMechanismsOffsetsDictionary = {}
    simpleMechanismsSerialNumberDictionary = {}
    root = offsetsFile.getroot()

    for mechanism in root:
        if mechanism.get('type') == 'simple':
            simpleMechanismsOffsetsDictionary[mechanism.find('Joint').get('name')] = mechanism.find('Joint').find('Force').get('value')
            simpleMechanismsSerialNumberDictionary[mechanism.find('Joint').get('name')] = instanceFileHandler.getSerialNumberByActuatorName(mechanism.find('Joint').get('name'))
        else:
            msg = "Complex joints are not currently supported in the actuator force offset setter!"
            logger.warn(msg)
            print msg
